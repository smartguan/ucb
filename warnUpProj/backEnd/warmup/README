
 This directory contains testing files for the Login Counter Warmup project for CS169.

 To run a mock server:
       python server.py
   - this will run a web server on port 5000 on localhost

 To manually test the mock server using the HTML client:
    open a browser and point it to http://localhost:8080/client.html

 To run unit tests for the mock server backend:
    make unit_tests

 To run functional tests for the mock server backend:
    [start a server]
    make func_tests [TEST_SERVER=serverHostPort]

    - the TEST_SERVER environment variable can be set to the hostname:port for
      the server to test, e.g., foo.com:5000 or myapp.herokuapp.com).
      (defaults to localhost:5000)

    - this will search for all files test*.py in the current directory for tests to run

 To write more functional tests:
    - You should write more functional tests, in Python, following the model of the
       tests in testSimple.py. Put your tests in a file "testAdditional.py"
       next to testSimple.py

 To run functional tests for YOUR actual server
    - [start your server, either on localhost, or perhaps on Heroku] 
    make func_test TEST_SERVER=serverHostPort

  

Heroku deployment details
=====================

  Deploying this app to Heroku was not trivial. Here is what worked: 

  - install virtualenv
      - On Mac OSX with my python setup the permissions were missing the
        execute bit: 
              INSTALL_DIR=/opt/local/Library/Frameworks/Python.framework/Versions/2.7             
              sudo chmod a+x $INSTALL_DIR/bin/virtualenv*
              sudo chmod a+x $INSTALL_DIR/lib/python2.7/site-packages/virtualenv-1.8.4-py2.7.egg-info
              sudo chmod a+x $INSTALL_DIR/lib/python2.7/site-packages/virtualenv_support
  - run virtualenv in the local project directory
            PATH=$INSTALL_DIR/bin:$PATH virtualenv --distribute venv
  - this will create a venv subdirectory. Add it to .gitignore
  - activate this virtual environment
       source venv/bin/activate
  - generate the requirements.txt (this must exist for Python projects in
     Heroku)
       pip freeze >requirements.txt
  - generate the Procfile

  - try to run the project locally:
        foreman start (also make start_local)
   
  - Create the Heroku app
       heroku create
       - Here you will normally see that the git remote is added (git remote
          v). In my case, it wasn't. This was because the project was in a
       subdirectory (project/warmup) and heroku did not find the .git
       directory. This created lots of problems, because everytime I pushed to 
       Heroku I was getting "Heroku push rejected, no Cedar-supported app
       detected". It took me a while to figure this out. 
       - Now I use "git subtree" (see Makefile)

   - I had trouble getting the app started because it was using the wrong
     port. The solution was to write the app to read the value of the PORT
     environment variable and use it as a port number. 

  - A very useful command for debugging this was: 
        heroku logs -t --app myapp
   

